import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from tkinter import messagebox, ttk as tk_tabs
import subprocess
import os
import openpyxl
from datetime import datetime

# Function to get MAC address
def get_mac_address():
    progress_label.config(text="Getting MAC Address...")
    progress_bar.start()
    try:
        result = subprocess.run(['getmac'], capture_output=True, text=True)
        return result.stdout.strip() or "MAC Address Not Found"
    except Exception as e:
        return f"Error: {str(e)}"
    finally:
        progress_bar.stop()

# Function to get serial number
def get_serial_number():
    progress_label.config(text="Getting Serial Number...")
    progress_bar.start()
    try:
        result = subprocess.run(['wmic', 'bios', 'get', 'serialnumber'], capture_output=True, text=True)
        return result.stdout.splitlines()[1].strip() or "Serial Number Not Found"
    except Exception as e:
        return f"Error: {str(e)}"
    finally:
        progress_bar.stop()

# Function to get computer name
def get_computer_name():
    progress_label.config(text="Getting Computer Name...")
    progress_bar.start()
    try:
        return os.environ['COMPUTERNAME']
    except Exception as e:
        return f"Error: {str(e)}"
    finally:
        progress_bar.stop()

# Function to save data to Excel
def save_to_excel(data):
    try:
        current_directory = os.getcwd()
        file_path = os.path.join(current_directory, 'Device_Info.xlsx')
        
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Device Info"
        
        headers = ['MAC Address', 'Serial Number', 'Computer Name', 'Make and Model', 'Join Status', 'Windows Version', 'Date Collected']
        ws.append(headers)
        ws.append(data + [datetime.now().strftime('%Y-%m-%d %H:%M:%S')])
        
        wb.save(file_path)
        messagebox.showinfo("Success", f"Data saved to {file_path}")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to save data: {str(e)}")

# Function to collect data based on selections
def collect_data():
    data = []
    try:
        if mac_var.get():
            data.append(get_mac_address())
        if serial_var.get():
            data.append(get_serial_number())
        if name_var.get():
            data.append(get_computer_name())

        if data:
            save_to_excel(data)
        else:
            messagebox.showwarning("No Selection", "Please select at least one option to pull.")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {str(e)}")
    finally:
        progress_label.config(text="Ready")

# Creating the main window with Ttkbootstrap
root = ttk.Window(themename="solar")
root.title("System Info Retriever")
root.geometry("600x400")
root.configure(bg="black")

# Creating Tabs
tab_control = tk_tabs.Notebook(root)
basic_tab = ttk.Frame(tab_control, style="TFrame")
bluetally_tab = ttk.Frame(tab_control, style="TFrame")
endpoint_tab = ttk.Frame(tab_control, style="TFrame")

tab_control.add(basic_tab, text="Basic Retrieval")
tab_control.add(bluetally_tab, text="BlueTally")
tab_control.add(endpoint_tab, text="Endpoint Manager")
tab_control.pack(expand=1, fill='both')

# Basic Retrieval Tab Layout
mac_var = ttk.BooleanVar()
serial_var = ttk.BooleanVar()
name_var = ttk.BooleanVar()

ttk.Checkbutton(basic_tab, text="MAC Address", variable=mac_var, bootstyle="round-toggle").pack(anchor='w', padx=10, pady=5)
ttk.Checkbutton(basic_tab, text="Serial Number", variable=serial_var, bootstyle="round-toggle").pack(anchor='w', padx=10, pady=5)
ttk.Checkbutton(basic_tab, text="Computer Name", variable=name_var, bootstyle="round-toggle").pack(anchor='w', padx=10, pady=5)

ttk.Button(basic_tab, text="Pull Data", command=collect_data, bootstyle="success-outline").pack(pady=20)

# Progress bar and label to indicate status
progress_label = ttk.Label(basic_tab, text="Ready", bootstyle="light")
progress_label.pack(pady=5)
progress_bar = ttk.Progressbar(basic_tab, mode='indeterminate')
progress_bar.pack(pady=10, fill='x')

# Placeholder for BlueTally Tab (will be developed later)
ttk.Label(bluetally_tab, text="BlueTally Integration Coming Soon...", bootstyle="info").pack(pady=20)

# Placeholder for Endpoint Manager Tab
ttk.Label(endpoint_tab, text="Endpoint Manager Integration Coming Soon...", bootstyle="info").pack(pady=20)

root.mainloop()
